All exercises here concern the music database, which is available at 
http://tahaghoghi.com/LearningMySQL/Downloads/Files/Data/SQL_files_with_foreign_key_references/music.sql

I strongly recommend ANSI join style as per 
http://code.openark.org/blog/mysql/mysql-joins-on-vs-using-vs-theta-style - 
the nutshell is that Theta style is like this:

SELECT ... 
FROM table1 INNER JOIN table2 
WHERE field1=field2 AND filter=something;

ANSI style is like this:
SELECT ... 
FROM table1 INNER JOIN table2 ON (field1=field2) 
WHERE filter=something;

The reason for this is that when you have many tables joined 
it's easier to see the join clause in ON or USING with ANSI style. 
If you join many tables and use theta style, where everything is 
in the WHERE clause, it's possible to forget some of the join clauses 
in the WHERE. If you put the join clauses in the JOIN part, it's way more readable.

1) Use one or more SELECT statements to find out how many tracks are on New Order's Brotherhood album.

***************************************************
version 1
***************************************************
mysql> SELECT artist_id FROM artist WHERE artist_name = "New Order";
+-----------+
| artist_id |
+-----------+
| 1 |
+-----------+
 
mysql> SELECT album_id FROM album WHERE album_name = "Brotherhood";
+----------+
| album_id |
+----------+
| 7 |
+----------+
 
mysql> SELECT count(track_id) FROM track WHERE album_id = 7 AND artist_id = 1;
+-----------------+
| count(track_id) |
+-----------------+
| 10 |
+-----------------+
 
***************************************************
version 2
***************************************************
mysql> SELECT artist_id FROM artist WHERE artist_name = "New Order";
mysql> SELECT album_id FROM album WHERE album_name = "Brotherhood";
 
mysql> SELECT max(track_id)+ 1 FROM track WHERE album_id = 7 AND artist_id = 1;
+-------------------+
| max(track_id) + 1 |
+-------------------+
| 10 |
+-------------------+
 
***************************************************
version 3
***************************************************
mysql> SELECT artist_id FROM artist WHERE artist_name = "New Order";
mysql> SELECT album_id FROM album WHERE album_name = "Brotherhood";
 
mysql> SELECT max(track_id)+ 1 FROM track WHERE album_id = 7 AND artist_id = 1;
+-------------------+
| max(track_id) + 1 |
+-------------------+
| 10 |
+-------------------+
 
***************************************************
version 4
***************************************************
mysql> SELECT artist_id FROM artist WHERE artist_name = "New Order";
mysql> SELECT album_id FROM album WHERE album_name = "Brotherhood";
 
mysql> SELECT track_id + 1
-> FROM track
-> WHERE album_id = 7 AND artist_id = 1
-> ORDER BY track_id DESC
-> LIMIT 1;
+--------------+
| track_id + 1 |
+--------------+
| 10 |
+--------------+
 
***************************************************
version 5
***************************************************
mysql> SELECT artist_id FROM artist WHERE artist_name = "New Order";
 
mysql> SELECT count(track_id)
-> FROM album INNER JOIN track USING (artist_id, album_id)
-> WHERE album_name = "Brotherhood" AND artist_id = 1;
 
***************************************************
version 6
***************************************************
mysql> SELECT artist_id FROM artist WHERE artist_name = "New Order";
 
mysql> SELECT count(track_id)
-> FROM album A INNER JOIN track T ON A.artist_id = T.artist_id AND A.album_id = T.album_id
-> WHERE album_name = "Brotherhood" AND T.artist_id = 1;
 
***************************************************
version 7
***************************************************
mysql> SELECT count(track_id)
-> FROM artist
-> INNER JOIN album USING (artist_id)
-> INNER JOIN track USING (artist_id, album_id)
-> WHERE album_id = 7 AND artist_id = 1;
 
***************************************************
version 8
***************************************************
mysql> SELECT count(T.track_id)
-> FROM artist AR
-> INNER JOIN album A ON AR.artist_id = A.artist_id
-> INNER JOIN track T ON A.artist_id = T.artist_id AND A.album_id = T.album_id
-> WHERE T.album_id = 7 AND T.artist_id = 1;
 
***************************************************
version 9
***************************************************
mysql> SELECT count(track_id)
-> FROM track
-> WHERE
-> album_name IN (SELECT album_id FROM album WHERE album_name = "Brotherhood")
-> AND
-> artist_id IN (SELECT artist_id FROM artist WHERE artist_name = "New Order");
 
***************************************************
 
2) Using a join, list the albums that we own by the band New Order

***************************************************
version 1 - ANSI style. JOIN … USING
***************************************************
mysql> SELECT album_name 
-> FROM artist INNER JOIN album USING (artist_id) 
-> WHERE artist_name = "New Order"; 

+------------------------------------------+
| album_name                               |
+------------------------------------------+
| Retro - John McCready FAN                |
| Substance (Disc 2)                       |
| Retro - Miranda Sawyer POP               |
| Retro - New Order / Bobby Gillespie LIVE |
| Power, Corruption & Lies                 |
| Substance 1987 (Disc 1)                  |
| Brotherhood                              |
+------------------------------------------+

***************************************************
version 2 - ANSI style. JOIN … ON
***************************************************
mysql> SELECT album_name 
-> FROM artist AR INNER JOIN album A ON AR.artist_id = A.artist_id 
-> WHERE AR.artist_name = "New Order";

***************************************************
version 3
***************************************************
mysql> SELECT album_name 
-> FROM artist, album 
-> WHERE artist.artist_id = album.artist_id AND artist_name = "New Order";

***************************************************

3) With INSERT statements, add the artist Leftfield to the database. 
For this new artist, add the album "Leftism" that has the following tracks:
a. Release the Pressure (Time: 7.39)
b. Afro-Melt (Time: 7.33)
c. Melt (Time: 5.21)
d. Song of Life (Time: 6.55)
e. Original (Time: 6.00)
f. Black Flute (Time: 3.46)
g. Space Shanty (Time: 7.15)
h. Inspection Check One (Time: 6.30)
i. Storm 3000 (Time: 5.44)
j. Open Up (Time: 6.52)
k. 21st Century Poem (Time: 5.42)
l. Bonus Track (Time: 1.22)

The answer to this question should be the INSERT statement(s).

***************************************************
mysql> SHOW COLUMNS FROM artist;
+-------------+-------------+------+-----+---------+-------+
| Field       | Type        | Null | Key | Default | Extra |
+-------------+-------------+------+-----+---------+-------+
| artist_id   | smallint(5) | NO   | PRI | 0       |       |
| artist_name | char(128)   | YES  |     | NULL    |       |
+-------------+-------------+------+-----+---------+-------+

mysql> SELECT MAX(artist_id) FROM artist;
+----------------+
| MAX(artist_id) |
+----------------+
|              6 |
+----------------+

mysql> INSERT INTO artist VALUES (7, "Leftfield");

mysql> SHOW COLUMNS FROM album;
+------------+-------------+------+-----+---------+-------+
| Field      | Type        | Null | Key | Default | Extra |
+------------+-------------+------+-----+---------+-------+
| artist_id  | smallint(5) | NO   | PRI | 0       |       |
| album_id   | smallint(4) | NO   | PRI | 0       |       |
| album_name | char(128)   | YES  |     | NULL    |       |
+------------+-------------+------+-----+---------+-------+

mysql> SELECT artist_id, album_id FROM album WHERE artist_id < 5 ORDER BY artist_id;
+-----------+----------+
| artist_id | album_id |
+-----------+----------+
|         1 |        1 |
|         1 |        2 |
|         1 |        3 |
|         1 |        4 |
|         1 |        5 |
|         1 |        6 |
|         1 |        7 |
|         2 |        1 |
|         3 |        1 |
|         3 |        2 |
|         4 |        1 |
+-----------+----------+

mysql> INSERT INTO album SET artist_id = 7, album_id = 1, album_name = "Leftism";

mysql> SHOW COLUMNS FROM track;
+------------+--------------+------+-----+---------+-------+
| Field      | Type         | Null | Key | Default | Extra |
+------------+--------------+------+-----+---------+-------+
| track_id   | smallint(3)  | NO   | PRI | 0       |       |
| track_name | char(128)    | YES  |     | NULL    |       |
| artist_id  | smallint(5)  | NO   | PRI | 0       |       |
| album_id   | smallint(4)  | NO   | PRI | 0       |       |
| time       | decimal(5,2) | YES  |     | NULL    |       |
+------------+--------------+------+-----+---------+-------+

mysql> INSERT INTO track (track_name, time, track_id, album_id, artist_id)
    -> VALUES
    -> ("Release the Pressure", 7.39, 0, 1, 7),
    -> ("Afro-Melt", 7.33, 1, 1, 7),
    -> ("Melt", 5.21, 2, 1, 7),
    -> ("Song of Life", 6.55, 3, 1, 7),
    -> ("Original", 6.00, 4, 1, 7),
    -> ("Black Flute", 3.46, 5, 1, 7),
    -> ("Space Shanty", 7.15, 6, 1, 7),
    -> ("Inspection Check One", 6.30, 7, 1, 7),
    -> ("Storm 3000", 5.44, 8, 1, 7),
    -> ("Open Up", 6.52, 9, 1, 7),
    -> ("21st Century Poem", 5.42, 10, 1, 7),
    -> ("Bonus Track", 1.22, 11, 1, 7);

***************************************************
4) How long in minutes is the Leftism album you added in Question 3? Hint: use the
SUM() aggregate function.

mysql> SELECT SUM(CAST(time AS TIME)) 
    -> FROM track JOIN album USING (artist_id, album_id) 
    -> WHERE artist_id = 7 AND album_id = 1;
+-------------------------+
| SUM(CAST(time AS TIME)) |
+-------------------------+
|                   67.99 |
+-------------------------+

5) Change the time for the Original track on the Leftism album to 6.22.

mysql> UPDATE track 
    -> SET time = 6.22 
    -> WHERE artist_id = 7 AND album_id = 1 AND track_name = "Original";

6) Remove the 'Bonus Track' from the Leftism album,

mysql> DELETE FROM track WHERE artist_id = 7 AND album_id = 1 AND track_name = "Bonus Track";
